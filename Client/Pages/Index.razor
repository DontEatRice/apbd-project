@page "/"
@inject NavigationManager navigationManager
@using blazor_project.Shared
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using blazor_project.Shared.Models
@using blazor_project.Shared.Models.DTOs
@inject AuthStateProvider authStateProvider
@inject HttpClient Http

<div class="title-container">
    <h1 class="title">Dashboard</h1> <button class="btn btn-primary logout-btn" @onclick="Logout">Logout</button>
</div>

<div class="search-dropdown">
    <SfAutoComplete TValue="string" TItem="TickerSearch" @bind-Value="@symbol" AllowFiltering="true" @ref="autoComplete">
        <AutoCompleteTemplates TItem="TickerSearch">
            <ItemTemplate>
                <span><span class='name'>@((context as TickerSearch).TickerSymbol)</span><span
                        class='company-name'>@((context as TickerSearch).Name)</span></span>
            </ItemTemplate>
        </AutoCompleteTemplates>
        <AutoCompleteFieldSettings Value="TickerSymbol"></AutoCompleteFieldSettings>
        <AutoCompleteEvents TValue="string" TItem="TickerSearch" Filtering="OnInputDebounced">
        </AutoCompleteEvents>
    </SfAutoComplete>
</div>
<button class="btn btn-primary" @onclick="Search">Search</button>
<a href="watchlist">
    <button class="btn btn-primary">Watchlist</button>
</a>

@if (tickerInfo is null)
{
    <h1 class="body-placeholder">Pick a symbol</h1>
}
else
{
    <div id="company">
        <img alt="@tickerInfo.name" src="@tickerInfo.branding?.logo_url" />
        <div class="details">
            <span class="header"><b>Exchange:</b> @tickerInfo.primary_exchange</span>
            <span class="header"><b>Employees:</b> @(tickerInfo.total_employees == 0 ? "No data" : tickerInfo.total_employees)</span>
            <span class="header"><b>Name:</b>@tickerInfo.name </span>
            <span class="header"><b>Description:</b> @tickerInfo.name</span>
        </div>
        <div class="details-actions">
            @if(watchlist is not null && !watchlist.Any(e => e == symbol)){
                <button class="btn btn-primary" @onclick="AddToWatchlist">Add to watchlist</button>
            } else {
                <button class="btn btn-primary" disabled>Already added</button>
            }
        </div>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="@(() => DownloadPrices(DateTime.Now.AddDays(-3), DateTime.Now))">Current day</button>
        <button class="btn btn-primary" @onclick="@(() => DownloadPrices(DateTime.Now.AddDays(-8), DateTime.Now.AddDays(-5)))">1 week ago</button>
        <button class="btn btn-primary" @onclick="@(() => DownloadPrices(DateTime.Now.AddMonths(-1), DateTime.Now.AddMonths(-1).AddDays(3)))">1 month ago</button>
        <button class="btn btn-primary" @onclick="@(() => DownloadPrices(DateTime.Now.AddMonths(-3), DateTime.Now.AddMonths(-3).AddDays(3)))">3 months ago</button>
    </div>
    @if (stockPrices.Count() > 0)
    {
        <SfStockChart Title="@(symbol + " stock price")" EnablePeriodSelector="false" @ref="chart">

            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Color="Transparent"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Color="Transparent" Width="0"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>

            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Color="Transparent"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>

            <StockChartCrosshairSettings Enable="true" LineType="LineType.Both"></StockChartCrosshairSettings>
            <StockChartTooltipSettings Enable="true" Shared="true"></StockChartTooltipSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@stockPrices" Type="ChartSeriesType.Candle" XName="time" High="high" Low="low"
            Open="open" Close="close" Volume="volume" Name="@tickerInfo.name" EnableSolidCandles="true"></StockChartSeries>
            </StockChartSeriesCollection>
        </SfStockChart>
    }

    @if (tickerNews.Count() > 0) {
        <h2 class="news-header">Recent news about @tickerInfo.name</h2>
        @foreach (var news in tickerNews)
        {
            <a href="@news.article_url" target="_blank" class="article">
                <h3 style="text-decoration: underline;">@news.title</h3>
                <div class="article-info">
                    <span class="author-name">@news.author</span>
                    <span class="article-desc">@news.description</span>
                    <span class="article-published">@news.published_utc.ToShortDateString()</span>
                </div>
            </a>
        }
    }
}

@code {
    public SfAutoComplete<string, TickerSearch>? autoComplete;
    private string symbol { get; set; } = "";
    private string? querySymbol = null; 
    private TickerInfo? tickerInfo { get; set; } = null;
    public SfStockChart? chart { get; set; }
    private List<TickerPrice> stockPrices { get; set; } = new List<TickerPrice>();
    private List<TickerNews> tickerNews { get; set; } = new List<TickerNews>();
    private List<string>? watchlist = new List<string>();
    private async Task Logout()
    {
        await authStateProvider.Logout();
    }
    private async Task DownloadPrices(DateTime from, DateTime to)
    {
        var price = await Http.GetFromJsonAsync<TickerPrice[]>($"api/tickers/price/{symbol}/{Timestamp.ToTimestamp(from)}/{Timestamp.ToTimestamp(to)}");
        if (price is null)
            return;

        stockPrices = price.ToList();
        chart?.Refresh();
    }

    private async Task AddToWatchlist() {
        var body = new WatchlistPOST {
            TickerSymbol = symbol
        };
        await Http.PostAsJsonAsync<WatchlistPOST>("/api/watchlist", body);
    }

    private async Task DownloadNews() {
        var data = await Http.GetFromJsonAsync<TickerNews[]>($"api/tickers/news/{symbol}");
        if (data is not null)
            tickerNews = data.ToList();
    }
    private async Task Search()
    {
        if (symbol == "")
            return;
        tickerInfo = await Http.GetFromJsonAsync<TickerInfo>("api/tickers/info/" + symbol);

        var date = DateTime.Now.AddDays(-3);
        await DownloadPrices(date, DateTime.Now);
        await DownloadNews();
        watchlist = (await Http.GetFromJsonAsync<Ticker[]>("/api/watchlist"))?.Select(e => e.TickerSymbol).ToList();
    }

    

    private async Task<IEnumerable<TickerSearch>> AutoCompleteSearch(string key)
    {
        if (key == "")
            return new List<TickerSearch>();

        var response = await Http.GetFromJsonAsync<TickerSearch[]>("api/Tickers/Search?q=" + key);

        if (response is null)
            return new List<TickerSearch>();

        IEnumerable<TickerSearch> DataSource = response.ToList();

        return DataSource;
    }

    private async Task OnFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;

        if (autoComplete is null)
            return;

        await autoComplete.HidePopupAsync();
        var data = await AutoCompleteSearch(args.Text);
        await autoComplete.FilterAsync(data, new Query());
        await autoComplete.ShowPopupAsync();
    }
    private Action<Syncfusion.Blazor.DropDowns.FilteringEventArgs> OnInputDebounced { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        OnInputDebounced = DebounceEvent<Syncfusion.Blazor.DropDowns.FilteringEventArgs>(async e => await this.OnFiltering(e), TimeSpan.FromMilliseconds(1000));
        navigationManager.TryGetQueryString<string>("symbol", out querySymbol);
        if (querySymbol is not null) {
            symbol = querySymbol;
            await Search();
        }
        await base.OnInitializedAsync();
    }
    Action<T> DebounceEvent<T>(Action<T> action, TimeSpan interval)
    {
        return Debounce<T>(arg =>
        {
            InvokeAsync(() =>
            {
                action(arg);
                StateHasChanged();
            });
        }, interval);
    }
    Action<T> Debounce<T>(Action<T> action, TimeSpan interval) {
        if (action == null) throw new ArgumentNullException(nameof(action));

        var last = 0;
        return arg =>
        {
            var current = System.Threading.Interlocked.Increment(ref last);
            Task.Delay(interval).ContinueWith(task => {
                if (current == last)
                    action(arg);
            });
        };
    }
}