@page "/fetchdata"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using blazor_project.Shared
@using blazor_project.Shared.Models.DTOs
@inject HttpClient Http

<style>
    .company-name {
        right: 15px;
        position: absolute;
    }
</style>

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfAutoComplete TValue="string" TItem="TickerSearch">
        <SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <ComponentAdaptor></ComponentAdaptor>
        </SfDataManager>
        <AutoCompleteTemplates TItem="TickerSearch">
        <ItemTemplate>
            <span><span class='name'>@((context as TickerSearch).TickerSymbol)</span><span class='company-name'>@((context as TickerSearch).Name)</span></span>
        </ItemTemplate>
        </AutoCompleteTemplates>
        <AutoCompleteFieldSettings Value="TickerSymbol"></AutoCompleteFieldSettings>
    </SfAutoComplete>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    
}
