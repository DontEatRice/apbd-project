@using static Client.Pages.Index
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using System.Text.Json.Serialization
@using blazor_project.Shared.Models
@using blazor_project.Shared.Models.DTOs
@inject HttpClient httpClient

@inherits DataAdaptor<Ticker>

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; } = null!;

    public override async Task<object> ReadAsync(DataManagerRequest dm, string key = "")
    {
        key = (string)dm.Where[0].value;
        Console.WriteLine("Entered ReadAsync key: " + key);
        if (key is null || key == "")
            return new DataResult() { Result = null, Count = 0 };
        Console.WriteLine(httpClient is null);

        if (httpClient is null) {
            return new DataResult() { Result = null, Count = 0 };
        }

        var response = await httpClient.GetFromJsonAsync<TickerSearch[]>("api/Tickers/Search?q=" + key);

        if (response is null)
            return new DataResult() { Result = null, Count = 0 };

        IEnumerable<TickerSearch> DataSource = response.ToList();
        var count = DataSource.Count();

        return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
    }
}